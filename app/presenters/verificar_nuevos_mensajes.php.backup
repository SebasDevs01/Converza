<?php
session_start();
require_once __DIR__.'/../models/config.php';

header('Content-Type: application/json');

// Verificación simple de sesión
if (!isset($_SESSION['id']) || !isset($_SESSION['usuario']) || !isset($_GET['usuario'])) {
    echo json_encode(['cambios' => false, 'error' => 'Sesión no válida o faltan parámetros']);
    exit;
}

$sess = $_SESSION['id'];
$user = intval($_GET['usuario']); // Cambiar de 'user' a 'usuario'
$ultimoId = intval($_GET['ultimo_id'] ?? 0);

$ultimaActualizacion = $_GET['ultima_actualizacion'] ?? '1970-01-01 00:00:00';

try {
    $respuesta = [
        'cambios' => false,
        'nuevos_mensajes' => [],
        'reacciones_actualizadas' => [],
        'mensajes_eliminados' => []
    ];
    
    // 1. MENSAJES NUEVOS
    $stmt = $conexion->prepare(
        "SELECT c.*, u.usuario as de_usuario, u.avatar as de_avatar 
         FROM chats c
         LEFT JOIN usuarios u ON c.de = u.id_use
         WHERE ((c.de = ? AND c.para = ?) OR (c.de = ? AND c.para = ?))
         AND c.id_cha > ?
         ORDER BY c.id_cha ASC
         LIMIT 10"
    );
    
    $stmt->execute([$user, $sess, $sess, $user, $ultimoId]);
    $nuevosMensajes = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    if (count($nuevosMensajes) > 0) {
        $respuesta['cambios'] = true;
        $respuesta['nuevos_mensajes'] = $nuevosMensajes;
        
        // Marcar como leídos los mensajes que recibí
        $stmtMarkRead = $conexion->prepare(
            "UPDATE chats SET leido = 1 
             WHERE de = ? AND para = ? AND leido = 0 AND id_cha > ?"
        );
        $stmtMarkRead->execute([$user, $sess, $ultimoId]);
    }
    
    // 2. REACCIONES ACTUALIZADAS (desde la última actualización)
    $stmtReacciones = $conexion->prepare(
        "SELECT cr.mensaje_id, cr.tipo_reaccion, COUNT(*) as total,
                GROUP_CONCAT(u.usuario SEPARATOR ', ') as usuarios,
                MAX(CASE WHEN cr.usuario_id = ? THEN 1 ELSE 0 END) as user_reacted
         FROM chat_reacciones cr
         INNER JOIN chats c ON cr.mensaje_id = c.id_cha  
         INNER JOIN usuarios u ON cr.usuario_id = u.id_use
         WHERE ((c.de = ? AND c.para = ?) OR (c.de = ? AND c.para = ?))
         AND cr.fecha > ?
         GROUP BY cr.mensaje_id, cr.tipo_reaccion
         ORDER BY cr.mensaje_id"
    );
    
    $stmtReacciones->execute([$sess, $user, $sess, $sess, $user, $ultimaActualizacion]);
    $reaccionesActualizadas = $stmtReacciones->fetchAll(PDO::FETCH_ASSOC);
    
    if (count($reaccionesActualizadas) > 0) {
        $respuesta['cambios'] = true;
        $respuesta['reacciones_actualizadas'] = $reaccionesActualizadas;
    }
    
    // 3. MENSAJES ELIMINADOS (desde la última actualización)
    if (class_exists('PDO')) {
        // Verificar si existe la tabla mensajes_eliminados
        $tableCheck = $conexion->query("SHOW TABLES LIKE 'mensajes_eliminados'");
        if ($tableCheck->rowCount() > 0) {
            $stmtEliminados = $conexion->prepare(
                "SELECT DISTINCT me.mensaje_id FROM mensajes_eliminados me
                 INNER JOIN chats c ON me.mensaje_id = c.id_cha
                 WHERE ((c.de = ? AND c.para = ?) OR (c.de = ? AND c.para = ?))
                 AND me.usuario_id = ?
                 AND me.fecha_eliminacion > ?"
            );
            
            $stmtEliminados->execute([$user, $sess, $sess, $user, $sess, $ultimaActualizacion]);
            $mensajesEliminados = $stmtEliminados->fetchAll(PDO::FETCH_COLUMN);
            
            if (count($mensajesEliminados) > 0) {
                $respuesta['cambios'] = true;
                $respuesta['mensajes_eliminados'] = $mensajesEliminados;
            }
        }
    }
    
    echo json_encode($respuesta);
    
} catch (Exception $e) {
    echo json_encode([
        'cambios' => false,
        'error' => $e->getMessage()
    ]);
}
?>